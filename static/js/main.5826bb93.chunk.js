(this["webpackJsonpgoit-react-hw-04-hooks-phonebook"]=this["webpackJsonpgoit-react-hw-04-hooks-phonebook"]||[]).push([[0],[,,,,,,,,,,,,,function(e,t,n){},function(e,t,n){},,function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.r(t);var a=n(1),c=n.n(a),s=n(6),r=n.n(s),o=(n(13),n(7)),i=n(8),u=n(2),l=n(22),b=(n(14),n(0)),d=function(e){var t=e.children;return Object(b.jsx)("div",{className:"container",children:t})},m=(n(16),function(e){var t=e.contacts,n=e.onDeleteContacts;return Object(b.jsx)("ul",{className:"list",children:t.map((function(e){var t=e.id,a=e.name,c=e.number;return Object(b.jsxs)("li",{className:"list_item",children:[Object(b.jsxs)("span",{children:[a,": ",c]}),Object(b.jsx)("button",{className:"button_list",onClick:function(){return n(t)},children:"Delete"})]},t)}))})}),j=(n(17),function(e){var t=e.value,n=e.onChange;return Object(b.jsx)("div",{children:Object(b.jsxs)("label",{className:"filtr_label",children:["Find contacts by name",Object(b.jsx)("input",{type:"text",name:"name",pattern:"^[a-zA-Z\u0430-\u044f\u0410-\u042f]+(([' -][a-zA-Z\u0430-\u044f\u0410-\u042f ])?[a-zA-Z\u0430-\u044f\u0410-\u042f]*)*$\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}",title:"The name can only consist of letters, apostrophes, dashes and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan etc.",required:!0,value:t,onChange:n,className:"filtr_input"})]})})});n(18);function f(e){var t=e.onSubmit,n=Object(a.useState)(""),c=Object(u.a)(n,2),s=c[0],r=c[1],o=Object(a.useState)(""),i=Object(u.a)(o,2),l=i[0],d=i[1],m=function(e){var t=e.currentTarget,n=t.name,a=t.value;switch(n){case"name":r(a);break;case"number":d(a);break;default:return}};return Object(b.jsxs)("form",{className:"form",onSubmit:function(e){e.preventDefault(),t({name:s,number:l}),r(""),d("")},children:[Object(b.jsxs)("label",{className:"form_label",children:["Name",Object(b.jsx)("input",{type:"text",name:"name",pattern:"^[a-zA-Z\u0430-\u044f\u0410-\u042f]+(([' -][a-zA-Z\u0430-\u044f\u0410-\u042f ])?[a-zA-Z\u0430-\u044f\u0410-\u042f]*)*$",title:"The name can only consist of letters, apostrophes, dashes and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan etc.",required:!0,value:s,onChange:m,className:"form_input"})]}),Object(b.jsxs)("label",{className:"form_label",children:["Number",Object(b.jsx)("input",{type:"tel",name:"number",pattern:"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}",title:"The phone number must be digits and may contain spaces, dashes, parentheses and may start with +",required:!0,value:l,onChange:m,className:"form_input"})]}),Object(b.jsx)("button",{type:"submit",className:"form_button",children:"Add contact"})]})}n(19);var h=function(){var e=Object(a.useState)([]),t=Object(u.a)(e,2),n=t[0],c=t[1],s=Object(a.useState)(""),r=Object(u.a)(s,2),h=r[0],O=r[1];Object(a.useEffect)((function(){var e=JSON.parse(localStorage.getItem("contacts"));e&&c(e)}),[]),Object(a.useEffect)((function(){localStorage.setItem("contacts",JSON.stringify(n))}),[n]);var p=function(){var e=h.toLowerCase();return n.filter((function(t){return t.name.toLowerCase().includes(e)}))}();return Object(b.jsxs)(d,{children:[Object(b.jsx)("h1",{children:"Phonebook"}),Object(b.jsx)(f,{onSubmit:function(e){var t=Object(i.a)({id:Object(l.a)()},e);n.some((function(t){return t.name.toLowerCase()===e.name.toLowerCase()}))?alert("".concat(e.name," is already in contacts")):c((function(e){return[t].concat(Object(o.a)(e))}))}}),Object(b.jsx)("h2",{children:"Contacts"}),Object(b.jsx)(j,{value:h,onChange:function(e){return O(e.currentTarget.value)}}),Object(b.jsx)(m,{contacts:p,onDeleteContacts:function(e){c((function(t){return t.filter((function(t){return t.id!==e}))}))}})]})};r.a.render(Object(b.jsx)(c.a.StrictMode,{children:Object(b.jsx)(h,{})}),document.getElementById("root"))}],[[20,1,2]]]);
//# sourceMappingURL=main.5826bb93.chunk.js.map